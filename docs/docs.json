{
  "auth": {
    "title": "Securing Your API with Authentication",
    "content": "In the digital world, securing your application's endpoints is paramount. MetaRoute's authentication system is designed to ensure that only authorized users can access your API, providing a robust layer of security. This section covers everything from setting up basic authentication to implementing advanced user verification mechanisms.",
    "url": "/docs/features/auth",
    "subtitles": [
      {
        "title": "Understanding Authentication with MetaRoute",
        "url": "/docs/features/auth"
      },
      {
        "title": "Implementing Authentication",
        "url": "/docs/features/auth"
      },
      {
        "title": "Token Generation",
        "url": "/docs/features/auth"
      },
      {
        "title": "Token Verification",
        "url": "/docs/features/auth"
      }
    ]
  },
  "caching": {
    "title": "Route Caching",
    "content": "Route caching in MetaRoute allows you to improve the performance of your API by caching the responses of specific routes. This can significantly reduce the response time and server load, resulting in a better user experience and lower operating costs.",
    "url": "/docs/features/caching",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/caching"
      },
      {
        "title": "Usage",
        "url": "/docs/features/caching"
      }
    ]
  },
  "configuration": {
    "title": "Configuration Service",
    "content": "The Configuration Service in MetaRoute provides a centralized way to manage and access configuration settings for your application. It allows you to define environment variables and configuration files to store application settings and retrieve them from anywhere in your code.",
    "url": "/docs/features/configuration",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/configuration"
      },
      {
        "title": "Usage",
        "url": "/docs/features/configuration"
      }
    ]
  },
  "email": {
    "title": "Email Server",
    "content": "The built-in Email Server in MetaRoute allows you to handle email communication within your application. It provides a quick-start approach to sending emails using SMTP.",
    "url": "/docs/features/email",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/email"
      },
      {
        "title": "Usage",
        "url": "/docs/features/email"
      }
    ]
  },
  "injections": {
    "title": "Dependency Injection in MetaRoute",
    "content": "Dependency Injection (DI) in MetaRoute streamlines the way dependencies are managed and injected, enhancing modularity, testability, and maintainability of your applications. This guide dives deep into utilizing DI with MetaRoute.",
    "url": "/docs/features/injections",
    "subtitles": [
      {
        "title": "Understanding Scopes",
        "url": "/docs/features/injections"
      },
      {
        "title": "Using the @Injectable Decorator",
        "url": "/docs/features/injections"
      },
      {
        "title": "Registering and Resolving Dependencies",
        "url": "/docs/features/injections"
      },
      {
        "title": "Registering a Class",
        "url": "/docs/features/injections"
      },
      {
        "title": "Resolving a Class",
        "url": "/docs/features/injections"
      },
      {
        "title": "Advanced Usage",
        "url": "/docs/features/injections"
      },
      {
        "title": "Custom Initializers",
        "url": "/docs/features/injections"
      },
      {
        "title": "Handling Circular Dependencies",
        "url": "/docs/features/injections"
      },
      {
        "title": "Clearing the Container",
        "url": "/docs/features/injections"
      },
      {
        "title": "Conclusion",
        "url": "/docs/features/injections"
      }
    ]
  },
  "logging": {
    "title": "Logging Service",
    "content": "The Logging Service in MetaRoute provides a built-in logging mechanism to log messages and events within your application. It allows you to record important information, errors, and warnings for debugging and monitoring purposes.",
    "url": "/docs/features/logging",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/logging"
      },
      {
        "title": "Usage",
        "url": "/docs/features/logging"
      }
    ]
  },
  "memory": {
    "title": "Memory Management",
    "content": "Memory management in MetaRoute allows you to monitor and control memory usage within your application. It provides features for setting up memory policies, checking memory usage, and enforcing memory limits to ensure optimal performance and prevent memory leaks.",
    "url": "/docs/features/memory",
    "subtitles": [
      {
        "title": "Memory Policies",
        "url": "/docs/features/memory"
      },
      {
        "title": "Memory Manager",
        "url": "/docs/features/memory"
      }
    ]
  },
  "rate-limiting": {
    "title": "Rate Limiting",
    "content": "Rate Limiting in MetaRoute allows you to control the number of requests a client can make to your API within a certain timeframe. This is crucial for protecting your API from abuse and ensuring fair usage.",
    "url": "/docs/features/rate-limiting",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/rate-limiting"
      },
      {
        "title": "Usage",
        "url": "/docs/features/rate-limiting"
      }
    ]
  },
  "routing": {
    "title": "Routing",
    "content": "Routing in MetaRoute allows you to define and manage API routes for handling incoming requests. It provides both RESTful and event-based routing mechanisms to support different types of applications and use cases.",
    "url": "/docs/features/routing",
    "subtitles": [
      {
        "title": "HTTP",
        "url": "/docs/features/routing"
      },
      {
        "title": "Event",
        "url": "/docs/features/routing"
      }
    ]
  },
  "templating": {
    "title": "Templating Engine",
    "content": "The Templating Engine in MetaRoute allows you to render dynamic HTML content in your application. It provides a flexible and customizable way to generate HTML pages using templates and data.",
    "url": "/docs/features/templating",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/templating"
      },
      {
        "title": "Usage",
        "url": "/docs/features/templating"
      }
    ]
  },
  "validation": {
    "title": "Data Validation",
    "content": "The Data Validation feature in MetaRoute allows you to validate incoming data against predefined rules and constraints. It ensures that the data meets the required criteria before processing it further in your application.",
    "url": "/docs/features/validation",
    "subtitles": [
      {
        "title": "How it Works",
        "url": "/docs/features/validation"
      },
      {
        "title": "Usage",
        "url": "/docs/features/validation"
      }
    ]
  },
  "docs": {
    "title": "ðŸ‘‹ Welcome to the MetaRoute Documentation",
    "content": "This documentation is designed to be comprehensive and user-friendly, guiding you through every step of using MetaRoute. Whether you're starting your journey in API development or you're an experienced developer looking to enhance your projects, you'll find valuable insights and tips here.",
    "url": "/docs",
    "subtitles": [
      {
        "title": "About MetaRoute",
        "url": "/docs"
      },
      {
        "title": "Key Features",
        "url": "/docs"
      },
      {
        "title": "Quick Start",
        "url": "/docs"
      },
      {
        "title": "App Configuration",
        "url": "/docs"
      },
      {
        "title": "Contributing",
        "url": "/docs"
      }
    ]
  }
}